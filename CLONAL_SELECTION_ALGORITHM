import random
import math

# Objective function
def objective_function(x):
    return x * math.sin(10 * math.pi * x) + 1

# Parameters
population_size = 10
clone_factor = 5
mutation_rate = 0.1
generations = 20

# Generate random population
def generate_population():
    return [random.uniform(0, 1) for _ in range(population_size)]

# Clone best antibodies
def clone_and_mutate(population, fitnesses):
    clones = []
    sorted_pop = [x for _, x in sorted(zip(fitnesses, population), reverse=True)]
    for i, antibody in enumerate(sorted_pop):
        num_clones = clone_factor
        for _ in range(num_clones):
            mutated = antibody + random.gauss(0, mutation_rate) * (1 / (i+1))
            mutated = min(1.0, max(0.0, mutated))  # keep in bounds
            clones.append(mutated)
    return clones

# Replace worst with best
def select_new_population(clones):
    fitnesses = [objective_function(x) for x in clones]
    sorted_clones = [x for _, x in sorted(zip(fitnesses, clones), reverse=True)]
    return sorted_clones[:population_size]

# Main evolution loop
population = generate_population()

for gen in range(generations):
    fitnesses = [objective_function(x) for x in population]
    print(f"Generation {gen+1}: Best Fitness = {max(fitnesses):.4f}")
    clones = clone_and_mutate(population, fitnesses)
    population = select_new_population(clones)

# Final result
best_solution = max(population, key=objective_function)
print(f"\nBest solution: x = {best_solution:.4f}, f(x) = {objective_function(best_solution):.4f}")


"""
ALGORITHM
Generate Initial Population:

Randomly create 10 values of x in the range [0, 1].

Evaluate Fitness:

Use the objective function to measure how "good" each x is (higher = better).

Clone and Mutate:

Sort population by fitness.

Clone each value 5 times.

Apply mutation (small random change), smaller for better ones.

Select New Population:

From all mutated clones, pick the top 10 best ones.

Repeat:

Run this process for 20 generations.

Result:

Print the best x found and its corresponding function value.

# Key Concepts Used:
Cloning: Copying good solutions.

Mutation: Slight change to explore nearby values.

Selection: Keep only the best candidates.

"""
