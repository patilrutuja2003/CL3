pip install tensorflow numpy pillow matplotlib

# Import Dependencies and Pretrained Model

import tensorflow_hub as hub
import tensorflow as tf
from matplotlib import pyplot as plt
import numpy as np
import cv2

model = hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2')

# PreProcess image and load
def load_image(img_path):
    img = tf.io.read_file(img_path)
    img = tf.image.decode_image(img, channels=3)
    img = tf.image.convert_image_dtype(img, tf.float32)
    img = img[tf.newaxis, :]
    return img

content_image = load_image('profile.jfif')
style_image = load_image('monet.jpeg')

# Visualize o/p
content_image.shape

plt.imshow(np.squeeze(content_image))


plt.show()

plt.imshow(np.squeeze(style_image))
plt.show()

stylized_image = model(tf.constant(content_image), tf.constant(style_image))[0]

plt.imshow(np.squeeze(stylized_image))
plt.show()

cv2.imwrite('generated_img.jpg', cv2.cvtColor(np.squeeze(stylized_image)*255, cv2.COLOR_BGR2RGB))


"""
ALGORITHM
1Import Libraries & Load Pretrained Model

Use tensorflow_hub to load a pretrained style transfer model.

2Load Content and Style Images

Read both images from disk.

Convert them to tensors and normalize pixel values.

3Preprocess Images

Resize and add batch dimension (img[tf.newaxis, :]).

4Visualize Input Images (Optional)

Use matplotlib to show content and style images.

5Apply Style Transfer

Pass both content and style images into the model.

Get the stylized output.

6Display and Save Output

Show the stylized image using matplotlib.

Save the result using cv2.imwrite().
"""
